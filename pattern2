
static void set_adj_matrix(uchar *adj) {
    uchar i, j;

    for (i = 0; i < TOT_NUM_NODES - 1; i++) {
        for (j = 0; j < TOT_NUM_NODES - 1; j++) {
            if (temp_adj_matrix[i][j]) {
                adj[mat2vec(i, j)] = 1;
            }
        }
    }
}

//Callbacks and broadcast connection structure
static const struct broadcast_callbacks broadcast_call = {broadcast_recv};
struct broadcast_conn broadcast;

/*---------------------------------------------------------------------------*/
PROCESS_THREAD(example_broadcast_process, ev, data) {
    static struct etimer et;
    pkg_hdr to_send;
    int q,fd;
    unsigned int new_seed;
    unsigned short op;
    //Adjacency matrix to be sent
    uchar adj[TOT_NUM_NODES * TOT_NUM_NODES];
    //Filling it
    uchar i, j;

    //Setting handlers and begin
    PROCESS_EXITHANDLER(broadcast_close(&broadcast);)

    PROCESS_BEGIN();
    
    
    memset(adj, 0, TOT_NUM_NODES * TOT_NUM_NODES);
    set_adj_matrix(adj);
    
    /*henneburgGraph(adj);
    srand(new_seed);
    random_init(new_seed);
    
    op=(unsigned short) (random_rand() % 2) + 1;
    
    
    if (op==1) {
        for (q = 0; q < 3; q++) {
            remove_random_edge(adj);
        }
    }
    
*/    
    printf("[ ");
    for (i = 0; i < TOT_NUM_NODES; i++) {
        for (j = 0; j < TOT_NUM_NODES; j++) {
            printf("%d,\t", adj[mat2vec(i, j)]);
        }
        printf("\n");
    }
    printf("]\n");



    //Send start pkg in broadcast to all the agents
    broadcast_open(&broadcast, 129, &broadcast_call);
    etimer_set(&et, 5 * CLOCK_SECOND);
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));
    send_start_pkg_broad(&broadcast);

    //Send the adjacency matrix in broadcast to all the agents
    etimer_set(&et, CLOCK_SECOND);
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));

    send_adj_pkg_broad(&broadcast, adj);
    etimer_set(&et, CLOCK_SECOND);
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));

    //Send the token to the first agent
    to_send.type = LEADER_START_ELECTION_PKG;
    //to_send.receiver = dest;
    packetbuf_clear();
    packetbuf_copyfrom(&to_send, sizeof (pkg_hdr));
    broadcast_send(&broadcast);
    //Turn off something
    NETSTACK_MAC.off(0);

    PROCESS_END();
}
/*---------------------------------------------------------------------------*/
